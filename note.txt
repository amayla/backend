CRUDE

Create
Read
Update
Delete

npm i mysqljs/mysql cors body-parser express 

app.get('/', (req,res) =>
res.send(<h1>Selamat datang di API todo JC 10</h1>))

ke browser

untuk get data

app.get('/getlist',(req,res) =>{
    db.query(`select * from todo`)
}

in index.js database:
var mysql = require('mysql')

const db = mysql.createConnection({
    user:"root",
    password: "12345678",
    database:'todo_jc10',
    host:'localhost'
})

module.exports = db

index.js:
var express = require('express');
var app = express()
var bodyParser = require('body-parser')
var cors = require ('cors')
const port = 8080
const db = require('./database')
app.use(bodyParser())
app.use(cors())

app.get('/', (req,res) =>{
    res.send(`<h1>Selamat datang di API todo JC 10</h1>`)
}
)

app.get('/getlist',(req,res) =>{
    db.query(`select * from todo`, (err,result)=>{
        if(err)throw err
        res.send(result)
    })
}

app.listen(port,console.log('listening in port' + port))


express is javascript backend framework

di workbench create new schema, and then new table with the following column header
id INT NN AI
action NN
iscompleted TINYINT(1) default 0


set workspace di backend, pas mau jalanin todoAPI, type cd todoAPI

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
senin, 16 sept 2019

memisahkan perintah dalam file controller: todoControllers.js

const db = require('./database/index.js')

module.exports = {
    getList: (req,res) =>{
        db.query(`select * from todo`, (err,result)=>{
            if(err) throw err
            res.send(result)
        })
    }
}

lalu di index.js kita import
const todoControllers = require('./1.controllers/todoControllers')

di index.js line 17 kita panggil 
app.get('/getlist', todoControllers.getList)


sekarang, pisahkan semua controllers

index.js kita jadi seperti ini :

var express = require('express');
var app = express()
var bodyParser = require('body-parser')
var cors = require ('cors')
const port = 8080
const todoControllers = require('./1.controllers/todoControllers')

app.use(bodyParser())
app.use(cors())

app.get('/', (req,res) =>{
    res.send(`<h1>Selamat datang di API todo JC 10</h1>`)
}
)

app.get('/getlist', todoControllers.getList)

app.post('/addtodo', todoControllers.addToDo)

app.put('/edittodo', todoControllers.editToDo)

app.put('/completedaction', todoControllers.completedAction)

app.delete('/deletetodo/:id', todoControllers.deleteToDo)

// buat controller agar menjadi dinamis

app.listen(port,console.log('listening in port' + port))


di todoControllers.js :

const db = require('./database/index.js')

module.exports = {
    getList: (req,res) =>{
        db.query(`select * from todo`, (err,result)=>{
            if(err) throw err
            res.send(result)
        })
    }, 
    
    addToDo:  (req,res) =>{
            db.query(`insert into todo values (0, '${req.body.action}',0)`, (err,result)=>{
                if(err) throw err
                res.send(result)
            })
    },

    editToDo: (req,res) => {
        db.query(`update todo set action = '${req.body.action}' where id = '${req.body.id}'`, (err,result)=>{
            if(err) throw err
            res.send(result)
        })
    },

    completedAction : (req,res) => {
        db.query(`update todo set isCompleted = 1 where id = '${req.body.id}'`, (err,result)=>{
            if(err) throw err
            res.send(result)
        })
    },

    deleteToDo : (req,res) =>{
        var id = req.params.id
        db.query(`delete from todo where id = ${id}`, (err,result)=>{
            if(err) throw err
            res.send(result)
        })
    }
    
}

sekarang create react app

PASTIKAN PATH KAMU ADA DI FOLDER YANG SESUAI (todolist BUKAN BACKEND!!!!)

install axios, bootstrap

di index html jangan lupa taro link bootstrapnya (sebelum head)

==================================================17 Sept 2019=======================================================

API endpoint adalah url, ketika dipanggil menjalankan suatu function. functionnya anonymous dalamnya ada 2 parameter req& res
parameter pertama adalah query sebuah string.

parameter kedua adalah sebuah function(callback, yaitu function yang bertindak sebagai parameter)


get sama delete gak bisa pakai body bisanya query,di axios pakai params (post dan put yang bisa pakai req.body)

params axios akan menjadi req.query

params di route API akan menjadi req.params

req.body adalah sebuah object

FE mau kirim sesuatu pakai get (params), di controller operatornya req.query

select * from xx = req.query.dbQuery


dbQUery itu sifatnya dinamis, bisa disesuaikan dengan parameter

index.js utama > router > controller > database


+++++++++++++++++++++++++++++++++++++20 Sept 19+++++++++++++++++++++++++++++++++++

sub querry

++++++++++++++++++++++++++++++++++++++25 sept 2019+++++++++++++++++++++++++++++++++
go to nodemailer for gmail
sign in to your other gmail account
https://myaccount.google.com/lesssecureapps
activate less secure apps
https://myaccount.google.com/security

enable 2 steps verivication

google node mailer using gmail

application specific > redirect to gmail

app password ; app: mail, device: mac

create file baru di backend express-nodemailer-auth

npm i mysqljs/mysql cors body-parser express nodemailer

lalu index.js (diluar)

var express = require('express');
var app = express()
var bodyParser = require('body-parser')
var cors = require ('cors')
const port = 1337
const nodemailer = require('nodemailer')
//const db = require('./database')
app.use(bodyParser.json())
app.use(cors())
var mysql = require('mysql')

const db = mysql.createConnection({
    user:"root",
    password: "12345678",
    database:'authentication_test',
    host:'localhost'
})


app.get('/', (req,res) =>{
    res.send(`<h1>Welcome to nodemailer auth API</h1>`)
}
)
let transporter = nodemailer.createTransport({
    service:'gmail',
    auth:{
        user:'in.orchidfour@gmail.com',
        pass:'bkmvyezscludbsjf'
    }
})


app.get('/sendmail', (req,res) =>{
    let to = req.query.email
    let mailOptions = {
        from:'Amanda Larasati <in.orchidfour@gmail.com>',
        to,
        subject:'Your registration is succeed',
        html:'<h1> Welcome to Commoditea!</h1>'
    }
    if(to){
        transporter.sendMail(mailOptions,(err,info)=>{
            if (err) throw err
            res.send('Email Berhasil')
        })
    }else{
        res.send('Email kosong!')
    }
}
)

app.get('/sendverificationmail', (req,res) =>{
    let to = req.query.email
    let username=req.query.username
    let mailOptions = {
        from:'Amanda Larasati <in.orchidfour@gmail.com>',
        to,
        subject:'Your registration is succeed',
        html:`<p>Klik <a href='http://localhost:1337/verify?username=${username}'>link</a> ini untuk verifikasi akun anda</p>`
    }
    if(to){
        transporter.sendMail(mailOptions,(err,info)=>{
            if (err) throw err
            res.send('Email Berhasil')
        })
    }else{
        res.send('Email kosong!')
    }
    
}

)
app.get('/verify', (req,res) =>{
    let username=req.query.username
    let sql = `update users set verified = 1 where username = '${username}'`

    db.query(sql, (err,result)=> {
        if (err) throw err
        res.send('Congratulations, your account is now verified')
    })
})




app.listen(port, console.log('Listening in port ' + port))

mengirimkan email ke user:
localhost:1337/sendverificationmail?email=ayla3492@gmail.com
setelah dapet email:
localhost:1337/sendverificationmail?email=ayla3492@gmail.com&username=amanda
setelah di click: 
http://localhost:1337/verify?username=amanda


tugas : tambahin email sama verified


+++++++++++++++++++++++++++++++++++++++++++26 Sept 2019+++++++++++++++++++++++++++++++++++++++
create invoice yang dikirimkan ke email
npm install html-pdf handlebars

pada authController.js tambahkan 

let transporter = nodemailer.createTransport({
    service:'gmail',
    auth:{
        user:'in.orchidfour@gmail.com',
        pass:'bkmvyezscludbsjf'
    },
    tls :{
        rejectUnauthorized: false
    }
})


create folder baru : helpers sama pdf templates

di pdfTemplate create firstTemplate.html

<html>
    <body>
        <center>
            <h1>Hello world</h1>
        </center>
    </body>
</html>

di helpers ada html-pdf.js

const fs = require ('fs')
const handlebars = require ('handlebars')
const pdf = require('html-pdf')

module.exports= {                           callback
    pdfcreate: (html, replacements,options,cb) => {
        fs.readFile(html, {encoding:'utf-8'}, (err,readHTML) => {
            if(err){
                console.log(err)
                return false
            }else{
                var template = handlebars.compile(readHTML) //baca file html yang setelah itu di compile ke handlebars
                var HtmlToPdf = template(replacements)// abis di compile, dimasukkin ke template, hasilnya adalah string panjang beserta html code file html tadi

                pdf.create(HtmlToPdf, options).toStream((err,stream) => {
                    if (err){
                        console.log(err)
                        return cb(stream)
                    }else{
                        return cb(stream)
                    }
                })
            }
        })
    }
}

lalu create endpoint baru di controller
 testEmail : (req,res) => {
        let options = {
            format : 'A4',
            orientation : 'portrait',
            border: {
                top:'0.5in',
                left:'0.15in',
                right:'0.15in',
                bottom:'0.25in'
            }
        }
        pdfcreate('./pdfTemplates/firstTemplate.html', {},options, (stream) => {
            
        })
    }

tambahin di authRouter

router.get('/sendpdf', authController.testEmail)

++++++++++++++++++++++++++++++++++++++++++1 oct+++++++++++++++++++++++++++++++++++++++++++
create new folder upload-with-multer
npm install express mysqljs/mysql cors body-parser multer
npm init
create index.js

var express = require('express')
var bodyParser = require ('body-parser')
var cors = require ('cors')

const app = express()
const port = 1110
var multer = require('multer')
//const { authRouter } = require('./routers')

app.use(bodyParser.json())
app.use(cors())

app.get('/', (req, res) => {
    res.send('hehe')
})

let multerStorageConfig = multer.diskStorage({
    destination:(req,file,cb) => {
        cb(null, './uploads')
    },

    filename : (req,file,cb) => {
        cb(null, 'myphoto.jpg')
    }
})

let filterConfig = (req, file,cb) => {
    if(file.mimetype.split('/')[1] == 'jpeg' || file.mimetype.split('/')[1] == 'png'){
        cb(null, true)
    }else{
        req.validation = {error : true, msg : 'File must be a .jpg/.png extension '}
        cb(null, false)
    }
        
}

let upload = multer({
    storage: multerStorageConfig,
    fileFilter: filterConfig
})

//app.use('/auth', authRouter)
app.post('/uploadimage', upload.single('aneh'), (req,res) => {
    console.log(req)
    res.send('success')
})

app.listen(port, () => console.log("Server up in port " + port))

multer : parameter yang menerima 1 object:
isinya ada

config(function berupa object)

callbacknya ada 2:
destination
-error 
-directory penyimpanan file

filename
-error
-filename 

filterconfig: function yang mengatur konfigurasi file yang diupload
didalamnya ada CB yang isinya boolean

mimetype define type of file & file ext

di postman

post
http://localhost:1110/uploadimage

